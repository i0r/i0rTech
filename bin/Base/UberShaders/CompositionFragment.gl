#version 430 core

#include UBO/Common.gl

#define FXAA_REDUCE_MIN 1.0 / 128.0
#define FXAA_REDUCE_MUL 1.0 / 8.0
#define FXAA_SPAN_MAX 8.0

layout( location = 0 ) in vec2 vPosition;

uniform sampler2D uSampler;

layout( location = 0 ) out vec4 fColor;

#ifdef FXAA
vec4 AntialisingFXAA() {
 vec2 inverseViewport = 1.0 / Common.ScreenSize;

 vec3 rgbNW = texture2D( uSampler, vPosition + ( vec2( -1.0, -1.0 ) * inverseViewport ) ).xyz;
 vec3 rgbNE = texture2D( uSampler, vPosition + ( vec2( 1.0, -1.0 ) * inverseViewport ) ).xyz;
 vec3 rgbSW = texture2D( uSampler, vPosition + ( vec2( -1.0, 1.0 ) * inverseViewport ) ).xyz;
 vec3 rgbSE = texture2D( uSampler, vPosition + ( vec2( 1.0, 1.0 ) * inverseViewport ) ).xyz;
 vec3 rgbM  = texture2D( uSampler, vPosition ).xyz;

 vec3 luma = vec3( 0.299, 0.587, 0.114 );
 float lumaNW = dot( rgbNW, luma );
 float lumaNE = dot( rgbNE, luma );
 float lumaSW = dot( rgbSW, luma );
 float lumaSE = dot( rgbSE, luma );
 float lumaM  = dot( rgbM, luma );

 float lumaMin = min( lumaM, min( min( lumaNW, lumaNE ), min( lumaSW, lumaSE ) ) );
 float lumaMax = max( lumaM, max( max( lumaNW, lumaNE ), max( lumaSW, lumaSE ) ) );

 vec2 dir = vec2( -( ( lumaNW + lumaNE ) - ( lumaSW + lumaSE ) ), ( ( lumaNW + lumaSW ) - ( lumaNE + lumaSE ) ) );

 float dirReduce = max( ( lumaNW + lumaNE + lumaSW + lumaSE ) * FXAA_REDUCE_MUL, FXAA_REDUCE_MIN );

 float rcpDirMin = 1.0 / ( min( abs( dir.x ), abs( dir.y ) ) + dirReduce );

 dir = min( vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX ), max( vec2( -FXAA_SPAN_MAX, -FXAA_SPAN_MAX ), dir * rcpDirMin ) ) * inverseViewport;
   
 vec2 dir2 = dir * 0.5;
   
 vec3 rgbA = 0.5 * ( texture( uSampler, vPosition + ( dir * -0.23333333 ) ).xyz + texture( uSampler, vPosition + ( dir * 0.16666666 ) ).xyz );      
 vec3 rgbB = ( rgbA * 0.5 ) + ( 0.25 * ( texture( uSampler, vPosition - dir2 ).xyz + texture( uSampler, vPosition + dir2 ).xyz ) );
   
 float lumaB = dot( rgbB, luma );

 if( lumaB < lumaMin || lumaB > lumaMax ) {
  return vec4( rgbA, 1.0 );
 } else {
  return vec4( rgbB, 1.0 );
 } 
}
#endif

#ifdef VIGNETTING
float Vignetting( const in vec2 fragCoordinates ) {
 vec2 distFromCenter = fragCoordinates - vec2( 0.5 );
 float dist = length( distFromCenter );
 
 return 1.0 - dist * VIGNETTE_STRENGTH;
}
#endif

#ifdef TONEMAPPING
float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;

vec4 TonemapLinear( in vec4 texelColor ) {
 vec4 outTex = texelColor * TONEMAPPING_EXPOSURE;
 vec3 corTex = pow( outTex.rgb, vec3( 1.0 / 2.2 ) );
 return vec4( corTex, 1.0 );
}

vec4 TonemapReinhard( in vec4 texelColor ) {
 vec4 outTex = texelColor * TONEMAPPING_EXPOSURE;
 outTex = outTex / ( vec4( 1.0 ) + outTex );
 vec3 corTex = pow( outTex.rgb, vec3( 1.0 / 2.2 ) );
 return vec4( corTex, 1.0 );
}

vec4 TonemapGDC( in vec4 texelColor ) {
 vec4 outTex = texelColor * TONEMAPPING_EXPOSURE;
 vec3 x = max( vec3( 0.0 ), outTex.rgb - vec3( 0.004 ) );
 vec3 corTex = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
 return vec4( corTex, 1.0 );
}

vec3 Uncharted2Tonemap( vec3 x ) {
 return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec4 TonemapUncharted2( in vec4 texelColor ) {
 vec4 outTex = texelColor * TONEMAPPING_EXPOSURE;
 vec3 curr = Uncharted2Tonemap( TONEMAPPING_EXPOSURE_BIAS * outTex.rgb );
 
 vec3 whiteScale = vec3( 1.0 ) / Uncharted2Tonemap( vec3( W ) );
 vec3 color = curr * whiteScale;
 
 vec3 corTex = pow( outTex.rgb, vec3( 1.0 / 2.2 ) );
 return vec4( corTex, 1.0 ); 
}
#endif


void main() {
	fColor = texture2D( uSampler, vPosition );

 #ifdef FXAA
  fColor = AntialisingFXAA();
 #endif

 #ifdef TONEMAPPING
  fColor = TonemapUncharted2( fColor );
 #endif
 
 #ifdef VIGNETTING
  fColor *= Vignetting( gl_FragCoord.xy / Common.ScreenSize );
 #endif
}