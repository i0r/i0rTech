#version 430 core

#include UBO/Common.gl

layout( location = 0 ) in vec3 bPosition;
layout( location = 1 ) in vec2 bTexCoordinates;
layout( location = 2 ) in vec3 bNormals;

#ifdef TEXTURE_NORMAL
 layout( location = 3 ) in vec3 bTangents;
 layout( location = 4 ) in vec3 bBiTangents;
#endif

uniform mat4 uModel;

layout( location = 0 ) out vec3  vPositionWorldSpace;
layout( location = 1 ) out vec2  vTexCoords;
layout( location = 2 ) out vec3  vNormalWorldSpace;
layout( location = 3 ) out float vDepth;
layout( location = 4 ) out float flogz;
#ifdef TEXTURE_NORMAL
 layout( location = 5 ) out mat3 vTBN;
#endif

void main() {
	#ifdef RELATIVE_POSITION
		const vec4 relPosition = vec4( bPosition.x + Common.ViewPosition.x, bPosition.y, bPosition.z + Common.ViewPosition.z, 1.0 );						  
  const vec4 posF        = Common.ViewProjection * relPosition;

		vPositionWorldSpace = vec3( uModel * relPosition );
		vTexCoords          = bTexCoordinates.xy - relPosition.xz;
  vTexCoords.y        = 1.0 - vTexCoords.y;
 #else
		vPositionWorldSpace    = vec3( uModel * vec4( bPosition, 1.0 ) );
  const vec4 posF        = Common.ViewProjection * uModel * vec4( bPosition, 1.0 );

		vTexCoords = vec2( bTexCoordinates.x, 1.0 - bTexCoordinates.y );
	#endif
 
	gl_Position = posF;
 gl_Position.z = log2( max( 1e-6, 1.0 + gl_Position.w ) ) * ( 2.0 / log2( Common.FarPlane + 1.0 ) ) - 1.0;
 
	mat3 normalMatrix = transpose( inverse( mat3( uModel ) ) );		
	vNormalWorldSpace = normalize( normalMatrix * bNormals );
 
 #ifdef TEXTURE_NORMAL
  vec3 T = normalize( normalMatrix * bTangents );
  vec3 B = normalize( normalMatrix * bBiTangents );
  vTBN = mat3( T, B, vNormalWorldSpace );
 #endif
 
 vDepth = gl_Position.z;
 flogz = 1.0 + gl_Position.w;
}
