#version 430 core

#include Constants.gl
#include UBO/Common.gl
#include UBO/Materials.gl
#include UBO/Sky.gl
#include Shadows.gl
#include UBO/Shadows.gl

layout( location = 0 ) in vec4 vPosition;
layout( location = 1 ) in vec2 vTexCoords;

uniform mat4      uModel;
uniform mat4      uInvModel;

uniform sampler2D ugDiffuse;
uniform sampler2D ugPosition;
uniform sampler2D ugNormals;

uniform sampler2D uDiffuseSampler;
uniform sampler2D uNormalSampler;

uniform int uMaterialIndex;

layout( location = 0 ) out vec4 fAlbedo;
//layout( location = 1 ) out vec4 fNormals;

void main() {
 vec2 depthUV  = gl_FragCoord.xy / Common.ScreenSize;
 
 vec4 normal   = texture( ugNormals, depthUV );
 vec4 albedo   = texture( ugDiffuse, depthUV );
 vec4 worldPos = texture( ugPosition, depthUV );
 worldPos.w    = 1.0;

 vec4 localPos = uInvModel * worldPos;
 
 float dist    = 0.5 - abs( localPos.y );
 float dist2   = 0.5 - abs( localPos.x );
 
 vec3 ddxWp   = dFdx( worldPos.xyz );
 vec3 ddyWp   = dFdy( worldPos.xyz );
 vec3 normalV = normalize( cross( ddyWp, ddxWp ) );
 
 ddxWp   = normalize( ddxWp );
 ddyWp   = normalize( ddyWp );
 
	vec3 T = ( Common.View * vec4( ddxWp,   0.0 )   ).xyz;
	vec3 B = ( Common.View * vec4( ddyWp,   0.0 )   ).xyz;
	vec3 N = ( Common.View * vec4( normalV, 0.0 )   ).xyz;
 mat3 tangentToView = mat3( T, B, N );
 
 if( dist > 0.0 && dist2 > 0.0 ) {
  vec2 decalTexCoords = localPos.xy + 0.5;
  decalTexCoords.y    = 1.0 - decalTexCoords.y;
  
  vec3 normalSample   = tangentToView * normalize( texture( uNormalSampler, decalTexCoords ).rgb * 2.0 - 1.0 );
  
  fAlbedo             = texture( uDiffuseSampler, decalTexCoords );
  //fNormals            = vec4( normalSample, 1.0 );
 } else {
  discard;
  //fAlbedo  = vec4( 1.0, 0.0, 0.0, 1.0);
  //fNormals = normal;
 }
}
