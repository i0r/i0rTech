#version 430 core

layout( binding = 0, rgba32f ) uniform writeonly image2D iFinalImage;
layout( binding = 1, rgba32f ) uniform readonly image2D  iNormalDepth;
layout( binding = 2, rgba32f ) uniform readonly image2D  iAlbedo;
layout( binding = 3, rgba32f ) uniform readonly image2D  iPosition;
layout( binding = 4, rgba32f ) uniform readonly image2D  iExtra;

uniform sampler2D            uFrontParaboloid;
uniform sampler2D            uRearParaboloid;

#include UBO/Common.gl
#include UBO/Sky.gl
#include UBO/Materials.gl
#include UBO/Lights.gl
#include UBO/Shadows.gl

#include Lighting.gl

#define MAX_LIGHTS_PER_TILE 32
#define WORK_GROUP_SIZE 16

layout( local_size_x = WORK_GROUP_SIZE, local_size_y = WORK_GROUP_SIZE ) in;

shared uint minDepth = 0xFFFFFFFF;
shared uint maxDepth = 0;

shared uint pointLightIndex[UBO_LIGHTS_MAX_POINT_LIGHT];
shared uint pointLightCount = 0;

void main() {
	ivec2 pixelPos = ivec2( gl_GlobalInvocationID.xy );
	
	vec4 normalColor = imageLoad( iNormalDepth, pixelPos );
	float d = ( normalColor.a );
	uint depth = uint( d * 0xFFFFFFFF );

	atomicMin( minDepth, depth );
	atomicMax( maxDepth, depth );

	barrier();
	
	float minDepthZ = float( minDepth / float( 0xFFFFFFFF ) );
	float maxDepthZ = float( maxDepth / float( 0xFFFFFFFF ) );
	
	vec2 tileScale = Common.ScreenSize * ( 1.0 / float( 2.0 * WORK_GROUP_SIZE ) );
	vec2 tileBias = tileScale - vec2( gl_WorkGroupID.xy );

	vec4 col1 = vec4( -Common.Projection[0][0] * tileScale.x, 
					   0.0f, 
					   tileBias.x, 
					   0.0f );
						
	vec4 col2 = vec4( 0.0f, 
					 -Common.Projection[1][1] * tileScale.y, 
					  tileBias.y, 
					  0.0f );
					 
	vec4 col4 = vec4( 0.0f, 0.0f, 1.0f, 0.0f );
					  
	vec4 frustumPlanes[6];
	frustumPlanes[0] = col4 + col1;
	frustumPlanes[1] = col4 - col1;
	frustumPlanes[2] = col4 - col2;
	frustumPlanes[3] = col4 + col2;
	frustumPlanes[4] = vec4( 0.0, 0.0, -1.0, -minDepthZ );
	frustumPlanes[5] = vec4( 0.0, 0.0, -1.0, maxDepth );
	
	for( int i = 0; i < 4; i++ ) {
		frustumPlanes[i] *= 1.0 / length( frustumPlanes[i].xyz );
	}
	
	uint threadCount = WORK_GROUP_SIZE * WORK_GROUP_SIZE;
	uint passCount = ( UBO_LIGHTS_MAX_POINT_LIGHT + threadCount - 1 ) / threadCount;
	
 for( int passIt = 0; passIt < passCount; ++passIt ) {
		uint lightIndex = passIt * threadCount + gl_LocalInvocationIndex;
		lightIndex = min( lightIndex, Lights.PointLightsCount );

		point_light_t p = Lights.PointLights[lightIndex];
		vec4 pos = Common.View * -vec4( p.Position.xyz, 1.0 );
		float rad = p.Radius;
	
		if( pointLightCount < MAX_LIGHTS_PER_TILE ) {
			bool inFrustum = true;
			for( int i = 3; i >= 0 && inFrustum; i-- ) {
				float dist = dot( frustumPlanes[i], pos );
				inFrustum = ( -rad <= dist );
			}

			if( inFrustum ) {
				uint id = atomicAdd( pointLightCount, 1 );
				pointLightIndex[id] = lightIndex;
			}
		}
	}

 barrier();

 vec4 diffuseColor 	   = imageLoad( iAlbedo, pixelPos );
 vec4 worldPosition 	  = imageLoad( iPosition, pixelPos );
 vec4 extra            = imageLoad( iExtra, pixelPos );
 vec3 normals 		       = normalColor.rgb;
 
 float metalness       = diffuseColor.a;
 float roughness       = extra.r;
 float ambient         = extra.g;
 
 vec4 base_color       = vec4( diffuseColor.rgb * ambient, 1.0 );

 vec4 color            = vec4( vec3( 0.0 ), 1.0 );
 int  materialId       = int( worldPosition.a );

 for( int i = 0; i < pointLightCount; ++i ) {
  color += ComputePointLight( Lights.PointLights[pointLightIndex[i]], worldPosition.xyz, normals, base_color, metalness, roughness, materialId );
 }

 color += ComputeSunLight( Sky.SunDirection, worldPosition.xyz, normals, base_color, metalness, roughness, materialId );

 barrier();
 
 imageStore( iFinalImage, pixelPos, color );
}