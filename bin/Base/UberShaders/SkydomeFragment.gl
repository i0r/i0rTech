#version 430 core

layout( location = 0 ) in vec2 vTexCoordinates;
layout( location = 1 ) in vec3 vPositionNormalized;
layout( location = 2 ) in vec3 vPosition;

#include UBO/Common.gl
#include UBO/Sky.gl

layout( location = 0 ) out vec4 fColor;

vec3 PerezExtinction( in float cos_theta, in float gamma, in float cos_gamma ) {
	vec3 chi = ( 1 + cos_gamma * cos_gamma ) / pow( 1 + Sky.H * Sky.H - 2 * cos_gamma * 
                                                 Sky.H, vec3( 1.5 ) );
 return ( 1 + Sky.A * exp( Sky.B / ( cos_theta + 0.01 ) ) ) * ( Sky.C + Sky.D * 
        exp( Sky.E * gamma ) + Sky.F * ( cos_gamma * cos_gamma ) + Sky.G * 
        chi + Sky.I * sqrt( cos_theta ) );
}

vec3 AtmosphereHosek() {
	vec3 V = normalize( vPositionNormalized );
	float cos_theta = clamp( V.z, 0.0, 1.0 );
	float cos_gamma = dot( V, Sky.SunDirection );
	float gamma_ = acos( cos_gamma );

	vec3 R = Sky.Z * PerezExtinction( cos_theta, gamma_, cos_gamma );
 return pow( R, vec3( 2.2 ) );
}

void main(){
	vec3 atmosphereColor = AtmosphereHosek();
 /*vec3 rayDirection = normalize( vPosition - Common.ViewPosition );
 vec3 rayOrigin = ( Common.ViewPosition );
	vec4 clouds = AtmosphereClouds( rayOrigin, rayDirection );
 */
	fColor = vec4( atmosphereColor, 1.0 );// + clouds;
}
